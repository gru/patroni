# docker compose file for running a 3-node PostgreSQL cluster
# with 3-node etcd cluster as the DCS and one haproxy node
version: "3.6"

networks:
    demo:

services:
    etcd1: &etcd
        image: andrushin/patroni
        networks: [ demo ]
        environment:
            ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
            ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
            ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
            ETCD_INITIAL_CLUSTER_STATE: new
            ETCD_INITIAL_CLUSTER_TOKEN: tutorial
        container_name: demo-etcd1
        hostname: etcd1
        command: etcd -name etcd1 -initial-advertise-peer-urls http://etcd1:2380

    etcd2:
        <<: *etcd
        container_name: demo-etcd2
        hostname: etcd2
        command: etcd -name etcd2 -initial-advertise-peer-urls http://etcd2:2380

    etcd3:
        <<: *etcd
        container_name: demo-etcd3
        hostname: etcd3
        command: etcd -name etcd3 -initial-advertise-peer-urls http://etcd3:2380

    haproxy:
        image: andrushin/patroni
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: haproxy
        container_name: haproxy
        ports:
            - "5000:5000"
            - "5001:5001"
        command: haproxy
        environment: &haproxy_env
            ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
            PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
            PATRONI_SCOPE: demo

    patroni1:
        image: andrushin/patroni
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: patroni1
        container_name: patroni1
        environment:
            <<: *haproxy_env
            PATRONI_NAME: patroni1
        volumes: &post_init
          - type: bind
            source: ./setup_cluster.sh
            target: /usr/local/bin/setup_cluster.sh
          - type: bind
            source: ./postgres0.yml
            target: /home/postgres/postgres0.yml

    patroni2:
        image: andrushin/patroni
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: patroni2
        container_name: patroni2
        environment:
            <<: *haproxy_env
            PATRONI_NAME: patroni2
        volumes: *post_init

    patroni3:
        image: andrushin/patroni
        networks: [ demo ]
        env_file: docker/patroni.env
        hostname: patroni3
        container_name: patroni3
        environment:
            <<: *haproxy_env
            PATRONI_NAME: patroni3
        volumes: *post_init
          
    destination:
        image: postgres:15
        networks: [ demo ]
        hostname: destination
        container_name: destination
        environment:
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=postgres
          - POSTGRES_DB=destination_db
        expose:
          - 5432
        volumes:
          - type: bind
            source: ./setup_destination.sql
            target: /docker-entrypoint-initdb.d/setup_destination.sql
      
    writer:
        image: writer
        build:
          context: ./app
          dockerfile: ./PgWriter/Dockerfile
        networks: [ demo ]
        container_name: writer
        environment:
          CONNECTION_STRING: "Server=haproxy;Port=5000;Database=source_db;User Id=postgres;Password=postgres;"
        depends_on:
          - haproxy
          - patroni1
          - patroni2
          - patroni3
          - etcd1
          - etcd2
          - etcd3
    
    reader:
        image: reader
        build:
          context: ./app
          dockerfile: ./PgReader/Dockerfile
        networks: [ demo ]
        container_name: reader
        environment:
          CONNECTION_STRING: "Server=destination;Port=5432;Database=destination_db;User Id=postgres;Password=postgres;"
        depends_on:
          - destination
    
    zookeeper:
        image: quay.io/debezium/zookeeper:1.8
        networks: [ demo ]
        container_name: zookeeper
        ports:
          - 2181:2181
          - 2888:2888
          - 3888:3888
     
    kafka:
        image: quay.io/debezium/kafka:1.8
        networks: [ demo ]
        container_name: kafka
        ports:
          - 9092:9092
          - 29092:29092
        links:
          - zookeeper
        environment:
          - ZOOKEEPER_CONNECT=zookeeper:2181
         
    connect1:
        image: debezium-jdbc
        build:
          context: ./debezium-jdbc
          dockerfile: ./Dockerfile
        networks: [ demo ]
        container_name: connect1
        ports:
          - 8083:8083
        links:
          - kafka
          - haproxy
          - destination
        environment:
          - BOOTSTRAP_SERVERS=kafka:9092
          - GROUP_ID=1
          - CONFIG_STORAGE_TOPIC=my_connect_configs
          - OFFSET_STORAGE_TOPIC=my_connect_offsets
          - STATUS_STORAGE_TOPIC=my_connect_statuses
        volumes:
          - type: bind
            source: ./connect/log4j.properties
            target: /kafka/config/log4j.properties
            
    connect2:
        image: debezium-jdbc
        build:
          context: ./debezium-jdbc
          dockerfile: ./Dockerfile
        networks: [ demo ]
        container_name: connect2
        ports:
          - 8084:8083
        links:
          - kafka
          - haproxy
          - destination
        environment:
          - BOOTSTRAP_SERVERS=kafka:9092
          - GROUP_ID=1
          - CONFIG_STORAGE_TOPIC=my_connect_configs
          - OFFSET_STORAGE_TOPIC=my_connect_offsets
          - STATUS_STORAGE_TOPIC=my_connect_statuses
        volumes:
          - type: bind
            source: ./connect/log4j.properties
            target: /kafka/config/log4j.properties
    
    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        environment:
          PGADMIN_DEFAULT_EMAIL: 'pgadmin4@pgadmin.org'
          PGADMIN_DEFAULT_PASSWORD: 'admin'
          PGADMIN_CONFIG_SERVER_MODE: 'False'
          PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
        volumes:
           - type: bind
             source: ./pgAdmin/servers.json
             target: /pgadmin4/servers.json
           - type: bind
             source: ./pgAdmin/pgpass
             target: /pgpass
        ports:
          - "5050:80"
        networks: [ demo ]
        restart: unless-stopped

